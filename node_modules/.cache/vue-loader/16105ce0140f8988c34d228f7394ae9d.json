{"remainingRequest":"/Users/gorilla/Desktop/themeforest-3C851IYx-shane-vuejs-personal-portfolio-template/shane/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/gorilla/Desktop/themeforest-3C851IYx-shane-vuejs-personal-portfolio-template/shane/src/components/news/News.vue?vue&type=template&id=a64b2d62&scoped=true&","dependencies":[{"path":"/Users/gorilla/Desktop/themeforest-3C851IYx-shane-vuejs-personal-portfolio-template/shane/src/components/news/News.vue","mtime":1624251314000},{"path":"/Users/gorilla/Desktop/themeforest-3C851IYx-shane-vuejs-personal-portfolio-template/shane/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/gorilla/Desktop/themeforest-3C851IYx-shane-vuejs-personal-portfolio-template/shane/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/gorilla/Desktop/themeforest-3C851IYx-shane-vuejs-personal-portfolio-template/shane/node_modules/babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/gorilla/Desktop/themeforest-3C851IYx-shane-vuejs-personal-portfolio-template/shane/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/gorilla/Desktop/themeforest-3C851IYx-shane-vuejs-personal-portfolio-template/shane/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/gorilla/Desktop/themeforest-3C851IYx-shane-vuejs-personal-portfolio-template/shane/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}