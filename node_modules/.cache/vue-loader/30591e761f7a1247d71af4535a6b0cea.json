{"remainingRequest":"/Users/gorilla/Desktop/themeforest-3C851IYx-shane-vuejs-personal-portfolio-template/shane/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/gorilla/Desktop/themeforest-3C851IYx-shane-vuejs-personal-portfolio-template/shane/src/components/news/NewsTwo.vue?vue&type=template&id=0f8a7ea6&scoped=true&","dependencies":[{"path":"/Users/gorilla/Desktop/themeforest-3C851IYx-shane-vuejs-personal-portfolio-template/shane/src/components/news/NewsTwo.vue","mtime":1624410424000},{"path":"/Users/gorilla/Desktop/themeforest-3C851IYx-shane-vuejs-personal-portfolio-template/shane/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/gorilla/Desktop/themeforest-3C851IYx-shane-vuejs-personal-portfolio-template/shane/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/gorilla/Desktop/themeforest-3C851IYx-shane-vuejs-personal-portfolio-template/shane/node_modules/babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/gorilla/Desktop/themeforest-3C851IYx-shane-vuejs-personal-portfolio-template/shane/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/gorilla/Desktop/themeforest-3C851IYx-shane-vuejs-personal-portfolio-template/shane/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/gorilla/Desktop/themeforest-3C851IYx-shane-vuejs-personal-portfolio-template/shane/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}